name: CI Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '18'

jobs:
  # Lint job
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Install backend dependencies
        working-directory: ./backend
        run: npm ci
        
      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci
        
      - name: Run ESLint
        run: npm run lint
        
      - name: Check Prettier formatting
        run: npm run format:check

  # Type check job
  typecheck:
    name: Type Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Install backend dependencies
        working-directory: ./backend
        run: npm ci
        
      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci
        
      - name: Type check backend
        working-directory: ./backend
        run: npm run typecheck
        
      - name: Type check frontend
        working-directory: ./frontend
        run: npm run typecheck

  # Test job
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        package: [backend, frontend]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install root dependencies
        run: npm ci
        
      - name: Install package dependencies
        working-directory: ./${{ matrix.package }}
        run: npm ci
        
      - name: Run tests
        working-directory: ./${{ matrix.package }}
        run: npm test -- --coverage --passWithNoTests
        env:
          CI: true
          
      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./${{ matrix.package }}/coverage/lcov.info
          name: ${{ matrix.package }}-coverage
          fail_ci_if_error: false

  # Build job
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [lint, typecheck]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Install backend dependencies
        working-directory: ./backend
        run: npm ci
        
      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci
        
      - name: Build backend
        working-directory: ./backend
        run: npm run build
        
      - name: Build frontend
        working-directory: ./frontend
        run: npm run build
        env:
          CI: false # Allow warnings in build
          
      - name: Upload backend build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: backend-build
          path: backend/dist
          
      - name: Upload frontend build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: frontend-build
          path: frontend/build

  # Security scan
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run npm audit
        run: |
          npm audit --audit-level=moderate || true
          cd backend && npm audit --audit-level=moderate || true
          cd ../frontend && npm audit --audit-level=moderate || true
          
      - name: Run security scan with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          
      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Docker build test
  docker:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: [build]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Build backend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: false
          tags: refactorforge-backend:test
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: Build frontend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: false
          tags: refactorforge-frontend:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Integration test (optional)
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [build, test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    services:
      # Add any required services here
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Download backend artifacts
        uses: actions/download-artifact@v3
        with:
          name: backend-build
          path: backend/dist
          
      - name: Install dependencies
        run: |
          npm ci
          cd backend && npm ci
          
      - name: Run integration tests
        working-directory: ./backend
        run: npm run test:integration || echo "No integration tests yet"
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test
          NODE_ENV: test