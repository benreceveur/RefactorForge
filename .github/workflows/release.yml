name: Release Pipeline

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.2.3)'
        required: true
        type: string

permissions:
  contents: write
  packages: write
  issues: write
  pull-requests: write

jobs:
  # Validate version
  validate:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Get version
        id: version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            VERSION="v${{ github.event.inputs.version }}"
          else
            VERSION="${{ github.ref_name }}"
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Releasing version: ${VERSION}"
          
      - name: Check if tag exists
        if: github.event_name == 'workflow_dispatch'
        run: |
          if git rev-parse "v${{ github.event.inputs.version }}" >/dev/null 2>&1; then
            echo "Error: Tag v${{ github.event.inputs.version }} already exists"
            exit 1
          fi

  # Run all tests
  test:
    name: Run All Tests
    runs-on: ubuntu-latest
    needs: validate
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: |
          npm ci
          cd backend && npm ci && cd ..
          cd frontend && npm ci && cd ..
          
      - name: Run all tests
        run: |
          npm run lint
          npm run typecheck
          npm test -- --coverage --passWithNoTests
          
      - name: Build application
        run: npm run build

  # Create release
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [validate, test]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Create tag (if manual)
        if: github.event_name == 'workflow_dispatch'
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git tag -a "v${{ github.event.inputs.version }}" -m "Release v${{ github.event.inputs.version }}"
          git push origin "v${{ github.event.inputs.version }}"
          
      - name: Generate changelog
        id: changelog
        run: |
          # Get previous tag
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          CURRENT_TAG="${{ needs.validate.outputs.version }}"
          
          echo "## What's Changed" > RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          
          if [ -n "$PREV_TAG" ]; then
            # Get commit messages between tags
            git log ${PREV_TAG}..HEAD --pretty=format:"* %s (%h)" >> RELEASE_NOTES.md
          else
            # First release - get all commits
            git log --pretty=format:"* %s (%h)" >> RELEASE_NOTES.md
          fi
          
          echo "" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/${PREV_TAG}...${CURRENT_TAG}" >> RELEASE_NOTES.md
          
      - name: Build release artifacts
        run: |
          # Build production artifacts
          npm run build
          
          # Create archives
          cd backend && tar -czf ../refactorforge-backend-${{ needs.validate.outputs.version }}.tar.gz dist package.json
          cd ../frontend && tar -czf ../refactorforge-frontend-${{ needs.validate.outputs.version }}.tar.gz build package.json
          cd ..
          
          # Create combined archive
          tar -czf refactorforge-${{ needs.validate.outputs.version }}.tar.gz \
            --exclude=node_modules \
            --exclude=.git \
            backend/dist backend/package.json \
            frontend/build frontend/package.json \
            package.json README.md LICENSE
            
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.validate.outputs.version }}
          name: Release ${{ needs.validate.outputs.version }}
          body_path: RELEASE_NOTES.md
          draft: false
          prerelease: ${{ contains(needs.validate.outputs.version, '-') }}
          files: |
            refactorforge-*.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Publish to npm (optional)
  publish-npm:
    name: Publish to npm
    runs-on: ubuntu-latest
    needs: [release]
    if: false # Enable when ready to publish to npm
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'
          
      - name: Publish packages
        run: |
          # Update version in package.json files
          VERSION="${{ needs.validate.outputs.version }}"
          VERSION="${VERSION#v}" # Remove 'v' prefix
          
          # Publish packages
          cd backend && npm version $VERSION && npm publish --access public
          cd ../frontend && npm version $VERSION && npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  # Deploy release
  deploy:
    name: Deploy Release
    runs-on: ubuntu-latest
    needs: [release]
    
    steps:
      - name: Deploy to production
        run: |
          echo "Deploying version ${{ needs.validate.outputs.version }} to production"
          # Add deployment commands
          
      - name: Announce release
        run: |
          echo "ðŸŽ‰ Version ${{ needs.validate.outputs.version }} has been released!"
          # Add announcements (Twitter, Discord, Slack, etc.)